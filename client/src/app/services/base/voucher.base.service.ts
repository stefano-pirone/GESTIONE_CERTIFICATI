/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  FOR CUSTOMIZE voucherBaseService PLEASE EDIT ../voucher.service.ts
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */
 // DEPENDENCIES
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';

// CONFIG
import { environment } from '../../../environments/environment';

// MODEL
import { Voucher } from '../../domain/gestione_certificati_db/voucher';

/**
 * THIS SERVICE MAKE HTTP REQUEST TO SERVER, FOR CUSTOMIZE IT EDIT ../voucher.service.ts
 */

/*
 * SCHEMA DB voucher
 *
	{
		codiceVoucher: {
			type: 'String'
		},
		dataAssegnazione: {
			type: 'Date'
		},
		dataScadenza: {
			type: 'Date'
		},
		note: {
			type: 'String'
		},
		tipologiaAcquisto: {
			type: 'String',
			enum : ["PERSONVUE","c","fornitore","nd","online","partnership"]
		},
		//RELATIONS
		//EXTERNAL RELATIONS
		area: {
			type: Schema.ObjectId,
			required : true,
			ref : "voucher"
		},
		corso: {
			type: Schema.ObjectId,
			ref : "voucher"
		},
		dipendente: {
			type: Schema.ObjectId,
			required : true,
			ref : "voucher"
		},
		esame: {
			type: Schema.ObjectId,
			required : true,
			ref : "voucher"
		},
	}
 *
 */
@Injectable()
export class VoucherBaseService {

    contextUrl: string = environment.endpoint + '/voucher';
    constructor(
        protected http: HttpClient
        ) { }

    // CRUD METHODS

    /**
    * voucherService.findByarea
    *   @description CRUD ACTION findByarea
    *   @param Objectid key Id della risorsa area da cercare
    *
    */
    findByArea(id: string): Observable<Voucher[]> {
        return this.http
            .get<Voucher[]>(this.contextUrl + '/findByarea/' + id)
            .pipe(
                map(response => response)
            );
    }

    /**
    * voucherService.findBydipendente
    *   @description CRUD ACTION findBydipendente
    *   @param Objectid key Id della risorsa dipendente da cercare
    *
    */
    findByDipendente(id: string): Observable<Voucher[]> {
        return this.http
            .get<Voucher[]>(this.contextUrl + '/findBydipendente/' + id)
            .pipe(
                map(response => response)
            );
    }

    /**
    * voucherService.findByesame
    *   @description CRUD ACTION findByesame
    *   @param Objectid key Id della risorsa esame da cercare
    *
    */
    findByEsame(id: string): Observable<Voucher[]> {
        return this.http
            .get<Voucher[]>(this.contextUrl + '/findByesame/' + id)
            .pipe(
                map(response => response)
            );
    }


    // Custom APIs

}
