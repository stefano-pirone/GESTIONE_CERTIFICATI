openapi: 3.0.0
info:
  title: GESTIONE_CERTIFICATI
  description: You can obtain JWT token from login API
  version: 0.1
servers:
  - url: http://localhost:3000/api
    description: Local server for testing
paths:
  /login:
    post:
      summary: Login API
      security: []   # No security
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              example:   # Sample object
                username: admin
                password: 1a1dc91c907325c69271ddf0c944bc72
      responses:
        '200':
          description: OK
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /verifyToken:
    post:
      summary: Verify token API
      security: [] #No security
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /changePassword:
    post:
      summary: Change password API
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordNew:
                  type: string
                passwordOld:
                  type: string
      responses:
        '200':
          description: OK
                

  #-----  User  -----
  /Users/{id}/changePassword:
    post:
      summary: Change password of user from admin
      tags:
        - User
      responses:
        "200":
          description: OK
    
  /Users/:
    post:
      summary: CRUD ACTION create
      tags:
        - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mail:
                  type: string
                name:
                  type: string
                password:
                  type: string
                roles:
                  type: string
                surname:
                  type: string
                username:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    
  /Users/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id 
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    post:
      summary: CRUD ACTION update
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
    
  #-----  area  -----
  /aree/:
    post:
      summary: CRUD ACTION create
      tags:
        - area
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/area"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - area
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/area"
    
  /aree/{id}:
    get:
      summary: CRUD ACTION get
      tags:
        - area
      parameters:
        - name: id
          in: path
          description: Id 
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/area"
    post:
      summary: CRUD ACTION update
      tags:
        - area
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/area"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/area"
    
  #-----  corso  -----
  /corsi/:
    post:
      summary: CRUD ACTION create
      tags:
        - corso
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/corso"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - corso
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/corso"
    
  /corsi/{id}:
    get:
      summary: CRUD ACTION get
      tags:
        - corso
      parameters:
        - name: id
          in: path
          description: Id 
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/corso"
    post:
      summary: CRUD ACTION update
      tags:
        - corso
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/corso"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/corso"
    
  #-----  dipendente  -----
  /dipendenti/:
    post:
      summary: CRUD ACTION create
      tags:
        - dipendente
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dipendente"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                codiceFiscale:
                  type: string
                cognome:
                  type: string
                nome:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - dipendente
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/dipendente"
    
  /dipendenti/{id}:
    get:
      summary: CRUD ACTION get
      tags:
        - dipendente
      parameters:
        - name: id
          in: path
          description: Id 
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dipendente"
    post:
      summary: CRUD ACTION update
      tags:
        - dipendente
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dipendente"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dipendente"
    
  #-----  esame  -----
  /esami/:
    post:
      summary: CRUD ACTION create
      tags:
        - esame
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/esame"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - esame
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/esame"
    
  /esami/{id}:
    get:
      summary: CRUD ACTION get
      tags:
        - esame
      parameters:
        - name: id
          in: path
          description: Id 
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/esame"
    post:
      summary: CRUD ACTION update
      tags:
        - esame
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/esame"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/esame"
    
  #-----  voucher  -----
  /voucher/findByarea/{key}:
    get:
      summary: CRUD ACTION findByarea
      tags:
        - voucher
      parameters:
        - name: key
          in: path
          description: Id della risorsa area da cercare
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/voucher"
    
  /voucher/findBydipendente/{key}:
    get:
      summary: CRUD ACTION findBydipendente
      tags:
        - voucher
      parameters:
        - name: key
          in: path
          description: Id della risorsa dipendente da cercare
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/voucher"
    
  /voucher/findByesame/{key}:
    get:
      summary: CRUD ACTION findByesame
      tags:
        - voucher
      parameters:
        - name: key
          in: path
          description: Id della risorsa esame da cercare
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/voucher"
    
    
  #-----  User  -----
  /Users/{id}/changePassword:
    post:
      summary: Change password by admin API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordNew:
                  type: string
                passwordAdmin:
                  type: string
      responses:
        '200':
          description: OK
  /Users/{id}:
    post:
      summary: Update User API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
    delete:
      summary: Delete User API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /Users:
    post:
      summary: Create User API
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: 'string'
                password: 
                  type: 'string'
                mail: 
                  type: 'string'
                name: 
                  type: 'string'
                surname: 
                  type: 'string'
                roles: 
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    
# JWT security
security:
  - bearerAuth: [] 
  
  
# Components
components:

  # Security
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  # Data Model
  schemas:
    User:
      properties:
        username:
          type: 'string'
        password: 
          type: 'string'
        mail: 
          type: 'string'
        name: 
          type: 'string'
        surname: 
          type: 'string'
        roles: 
          type: array
          items:
            type: string
      required:
        - username
        - password
        

    User:
      properties:
        _id:
          type: string
        mail:
          type: string
        name:
          type: string
        password:
          type: string
        roles:
          type: string
        surname:
          type: string
        username:
          type: string
      required:
        -  _id
        - password
        - username
      
    
    area:
      properties:
        _id:
          type: string
        nome:
          type: string
      required:
        -  _id
        - nome
      
    
    corso:
      properties:
        _id:
          type: string
        nome:
          type: string
      required:
        -  _id
        - nome
      
    
    dipendente:
      properties:
        _id:
          type: string
        codiceFiscale:
          type: string
        cognome:
          type: string
        nome:
          type: string
      required:
        -  _id
      
    
    esame:
      properties:
        _id:
          type: string
        nome:
          type: string
      required:
        -  _id
        - nome
      
    
    voucher:
      properties:
        _id:
          type: string
        codiceVoucher:
          type: string
        dataAssegnazione:
          type: integer
        dataScadenza:
          type: integer
        note:
          type: string
        tipologiaAcquisto:
          type: string
      required:
        -  _id
      
    
